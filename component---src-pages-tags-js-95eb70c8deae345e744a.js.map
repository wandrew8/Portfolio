{"version":3,"sources":["webpack:///./src/pages/tags.js","webpack:///./src/components/layout2.js"],"names":["Tags","location","title","query","TAG_QUERY","render","allMarkdownRemark","TagContainer","group","map","edge","i","key","tag","to","kebabCase","className","totalCount","nodes","image","fluid","frontmatter","featuredImage","childImageSharp","styled","div","variables","primaryLight","MainWrapper","main","large","StyledFooter","footer","primaryLightGray","Gradient","primaryBlue","primaryGreen","Layout","children","useState","width","setWidth","useEffect","updateWindowDimensions","window","innerWidth","addEventListener","removeEventListener","from","height","pathname","styles","style","overflow","Date","getFullYear","defaultProps"],"mappings":"gsoLAkDeA,UAzCF,SAAC,GAAD,EAAEC,SAAF,OACX,oCACE,kBAAC,IAAD,CAAKC,MAAM,SACP,kBAAC,IAAD,KACA,6BACI,oCACA,kBAAC,cAAD,CACIC,MAAOC,EACPC,OAAQ,YAA4B,IAAzBC,EAAwB,EAAxBA,kBACP,OACA,kBAACC,EAAD,KACKD,EAAkBE,MAAMC,KAAI,SAACC,EAAMC,GAChC,OACI,kBAAC,OAAD,CACEC,IAAKF,EAAKG,IACVC,GAAE,SAAWC,IAAUL,EAAKG,KAA1B,KACF,yBAAKG,UAAU,OACb,4BAAKN,EAAKG,KACV,+BAAKH,EAAKO,WAAV,IAAuBP,EAAKO,WAAa,EAAI,WAAa,UAA1D,KACA,yBAAKD,UAAU,kBACZN,EAAKQ,MAAMT,KAAI,SAAAU,GACd,OACE,kBAAC,IAAD,CAAKH,UAAU,QAAQI,MAAOD,EAAME,YAAYC,cAAcC,gBAAgBH,mBAhB5G,aAqCZ,IAAMhB,EAAS,aA0BTG,EAAeiB,IAAOC,IAAV,qEAAGD,CAAH,wqBAGLE,IAAUC,e,6ICvEjBC,G,UAAcJ,IAAOK,KAAV,2EAAGL,CAAH,wLAQsBE,IAAUI,QAM3CC,EAAeP,IAAOQ,OAAV,4EAAGR,CAAH,gCACPE,IAAUO,kBAIfC,EAAWV,IAAOC,IAAV,wEAAGD,CAAH,sEAGyBE,IAAUS,YAAgBT,IAAUU,cAGrEC,EAAS,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUrC,EAAe,EAAfA,SAAe,EACbsC,qBAApBC,EADiC,KAC1BC,EAD0B,KAYzC,OAVAC,qBAAU,WACR,IAAMC,EAAyB,WAC7BF,EAASG,OAAOC,aAKlB,OAHAJ,EAASG,OAAOC,YAChBD,OAAOE,iBAAiB,SAAUH,GAE3B,WACLC,OAAOG,oBAAoB,SAAUJ,OAGvC,kBAAC,IAAD,KACGH,EAAQ,IAAM,kBAAC,IAAD,MAAa,kBAAC,IAAD,MACxB,kBAAC,SAAD,CACEQ,KAAM,CAAEC,OAA8B,MAAtBhD,EAASiD,SAAmB,IAAM,KAClDpC,GAAI,CAAEmC,OAA8B,MAAtBhD,EAASiD,SAAmB,IAAM,OAC/C,SAAAC,GAAM,OACL,yBAAKC,MAAK,eAAGC,SAAU,UAAaF,IAClC,kBAACjB,EAAD,UAIR,kBAACN,EAAD,KACKU,GAEL,kBAACP,EAAD,WACK,IAAIuB,MAAOC,cADhB,mBAWRlB,EAAOmB,aAAe,CACpBvD,SAAU,IAGGoC","file":"component---src-pages-tags-js-95eb70c8deae345e744a.js","sourcesContent":["import React from \"react\"\nimport Layout2 from \"../components/layout2\"\nimport kebabCase from \"lodash/kebabCase\"\nimport styled from 'styled-components'\nimport Img from 'gatsby-image'\nimport { variables } from '../styles/variables'\nimport { Link, StaticQuery, graphql } from 'gatsby'\nimport SEO from \"../components/seo\"\n\nconst Tags = ({location}) => (\n  <>\n    <SEO title=\"Tags\" />\n        <Layout2>\n        <div>\n            <h1>Tags</h1>\n            <StaticQuery \n                query={TAG_QUERY}\n                render={({ allMarkdownRemark }) => {\n                    return (\n                    <TagContainer>\n                        {allMarkdownRemark.group.map((edge, i) => {\n                            return (\n                                <Link \n                                  key={edge.tag} \n                                  to={`/tags/${kebabCase(edge.tag)}/`}>\n                                  <div className=\"tag\">\n                                    <h3>{edge.tag}</h3>\n                                    <p>({edge.totalCount} {edge.totalCount > 1 ? \"projects\" : \"project\"})</p>\n                                    <div className=\"imageContainer\">\n                                      {edge.nodes.map(image => {\n                                        return(\n                                          <Img className=\"image\" fluid={image.frontmatter.featuredImage.childImageSharp.fluid} />\n                                        )\n                                      })}\n                                    </div>\n                                  </div>\n                                </Link>\n                                \n                            )\n                        })}\n                    </TagContainer>\n                    )\n                }}\n\n            />\n        </div>\n      </Layout2>\n  </>\n)\n\nexport default Tags\n\nconst TAG_QUERY = graphql`\nquery AllTags {\n  allMarkdownRemark {\n    group(field: frontmatter___tags) {\n      tag: fieldValue\n      totalCount\n      nodes {\n        frontmatter {\n          title\n          featuredImage {\n            childImageSharp {\n              fluid(maxWidth: 50, quality: 100,) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n          slug\n        }\n      }\n    }\n  }\n}\n\n\n`\n\nconst TagContainer = styled.div`\n  a {\n    text-decoration: none;\n    color: ${variables.primaryLight};\n\n  }\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 300px);\n  grid-gap: 1rem;\n  justify-content: center;\n  align-items: center;\n  .tag {\n    width: 300px;\n    height: auto;\n    border-radius: 10px;\n    padding: 1rem;\n    display: grid;\n    grid-template-columns: 1fr;\n    justify-content: center;\n    align-items: center;\n    box-shadow: 0px 3px 10px rgba(25, 17, 34, 0.15);\n    transition: 200ms linear;\n    overflow: hidden;\n    cursor: pointer;\n    .imageContainer {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n    .image {\n      width: 50px;\n      height: 50px;\n      min-width: 50px;\n      min-height: 50px;\n      border-radius: 5px;\n      margin: 0rem 0.25rem;\n\n    }\n    h3 {\n      font-size: 1.2rem;\n      margin: 0;\n      margin-bottom: 0.5rem;\n      padding: 0;\n    }\n    &:hover{\n      box-shadow: 0px 3px 20px rgba(25, 17, 34, 0.2);\n\n    }\n  }\n`;","import React, { useState, useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Spring } from 'react-spring/renderprops'\nimport HeaderDrawer from './HeaderDrawer'\nimport styled from 'styled-components'\nimport Header from \"./header\"\nimport App from './app'\nimport { variables } from '../styles/variables'\nimport \"./layout.css\"\n\nconst MainWrapper = styled.main`\n  width: 100%;\n  margin: 0rem auto;\n  margin-bottom: 3rem;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 1rem;\n  padding: 0rem;\n  @media only screen and (max-width: ${variables.large}) {\n        grid-template-columns: 1fr;\n    }\n\n`;\n\nconst StyledFooter = styled.footer`\n  color: ${variables.primaryLightGray};\n  font-size: 0.9rem;\n`;\n\nconst Gradient = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, ${variables.primaryBlue}, ${variables.primaryGreen});\n`;\n\nconst Layout = ({ children, location }) => {\n  const [ width, setWidth ] = useState();\n  useEffect(() => {\n    const updateWindowDimensions = () => {\n      setWidth(window.innerWidth);\n    }\n    setWidth(window.innerWidth);\n    window.addEventListener(\"resize\", updateWindowDimensions);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      window.removeEventListener(\"resize\", updateWindowDimensions);    };\n  });\n  return (\n    <App>\n      {width > 928 ? <Header /> : <HeaderDrawer />}\n          <Spring \n            from={{ height: location.pathname === '/' ? 100 : 150 }} \n            to={{ height: location.pathname === '/' ? 150 : 100 }}>\n            {styles => (\n              <div style={{overflow: 'hidden', ...styles}}>\n                <Gradient/>\n              </div>\n            )}\n          </Spring>\n        <MainWrapper>\n            {children}\n        </MainWrapper>\n        <StyledFooter>\n          Â© {new Date().getFullYear()} Andrew Weiss\n        </StyledFooter>\n    </App>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nLayout.defaultProps = {\n  location: {},\n}\n\nexport default Layout\n"],"sourceRoot":""}