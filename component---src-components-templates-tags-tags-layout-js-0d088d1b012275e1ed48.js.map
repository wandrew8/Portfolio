{"version":3,"sources":["webpack:///./src/components/projectListing.js","webpack:///./src/components/templates/tags/tagsLayout.js"],"names":["GridContainer","styled","div","variables","medium","Button","button","primaryLightGray","Post","article","Listing","query","render","allMarkdownRemark","edges","map","edge","node","frontmatter","slug","title","category","primaryTech","date","subtitle","image","featuredImage","childImageSharp","fluid","console","log","key","to","className","Tags","pageContext","data","tag","totalCount","tagHeader","pageQuery"],"mappings":"0iVAMaA,EAAgBC,IAAOC,IAAV,gFAAGD,CAAH,iKAKaE,IAAUC,QAOpCC,EAASJ,IAAOK,OAAV,yEAAGL,CAAH,+OAMKE,IAAUI,iBACrBJ,IAAUI,iBAONJ,IAAUI,kBAIdC,EAAOP,IAAOQ,QAAV,uEAAGR,CAAH,qjBA8FFS,IA9BC,kBACd,kBAAC,cAAD,CACEC,MA5Be,aA6BfC,OAAQ,YAA4B,IAAzBC,EAAwB,EAAxBA,kBACP,OACI,kBAACb,EAAD,KACGa,EAAkBC,MAAMC,KAAI,SAAAC,GAAS,IAAD,EAC+CA,EAAKC,KAA7EC,YAAeC,EADU,EACVA,KAAMC,EADI,EACJA,MAAOC,EADH,EACGA,SAAUC,EADb,EACaA,YAAaC,EAD1B,EAC0BA,KAAMC,EADhC,EACgCA,SAC3DC,EAAQT,EAAKC,KAAKC,YAAYQ,cAAcC,gBAAgBC,MAElE,OADAC,QAAQC,IAAIL,GAER,kBAACjB,EAAD,CAAMuB,IAAKZ,GACP,kBAAC,OAAD,CAAMa,GAAE,YAAcb,GACpB,kBAAC,IAAD,CAAKc,UAAU,eAAeL,MAAOH,IACrC,4BAAKL,GACL,2BAAII,GACJ,kBAACnB,EAAD,KAASgB,GACT,+BAAQE,EAAR,MAAiBD,UAhB3C,W,kCCrGF,mIAyCiBY,UAlCJ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACjBC,EAAQF,EAARE,IAD4B,EAEND,EAAKvB,kBAA3BC,EAF4B,EAE5BA,MAAOwB,EAFqB,EAErBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEED,EAFF,IAGf,OACE,kBAAC,IAAD,KACE,6BACI,4BAAKE,GACL,kBAAC,IAAD,KACCzB,EAAMC,KAAI,SAAAC,GAAS,IAAD,EACiEA,EAAKC,KAA7EC,YAAeC,EADR,EACQA,KAAMC,EADd,EACcA,MAAOC,EADrB,EACqBA,SAAUC,EAD/B,EAC+BA,YAAaC,EAD5C,EAC4CA,KAAMC,EADlD,EACkDA,SAC3DC,EAAQT,EAAKC,KAAKC,YAAYQ,cAAcC,gBAAgBC,MAElE,OADAC,QAAQC,IAAIL,GAER,kBAAC,IAAD,CAAMM,IAAKZ,GACP,kBAAC,OAAD,CAAMa,GAAE,YAAcb,GACtB,kBAAC,IAAD,CAAKc,UAAU,eAAeL,MAAOH,IACrC,4BAAKL,GACL,2BAAII,GACJ,kBAAC,IAAD,KAASH,GACT,+BAAQE,EAAR,MAAiBD,SAM7B,kBAAC,OAAD,CAAMU,GAAG,SAAT,eAaL,IAAMQ,EAAS","file":"component---src-components-templates-tags-tags-layout-js-0d088d1b012275e1ed48.js","sourcesContent":["import React from \"react\"\r\nimport { StaticQuery, Link, graphql } from \"gatsby\"\r\nimport { variables } from '../styles/variables'\r\nimport Img from 'gatsby-image'\r\nimport styled from 'styled-components'\r\n\r\nexport const GridContainer = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, 300px);\r\n  grid-gap: 1rem;\r\n  justify-content: center;\r\n  @media only screen and (max-width: ${variables.medium}) {\r\n        h2 {\r\n          font-size: 1.2rem;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 0rem 0.5rem;\r\n    text-align: center;\r\n    border-radius: 2px;\r\n    display: block;\r\n    font-size: 0.7rem;\r\n    border: solid 1px ${variables.primaryLightGray};\r\n    color: ${variables.primaryLightGray};\r\n    transition: 300ms ease-in;\r\n    cursor: pointer;\r\n    width: auto-fit;\r\n    background: transparent;\r\n    margin: 0.5rem 0rem;\r\n    &:hover {\r\n        color: ${variables.primaryLightGray};\r\n    }\r\n`;\r\n\r\nexport const Post = styled.article`\r\n    box-shadow: 0px 3px 10px rgba(25, 17, 34, 0.05);\r\n    padding: 1rem;\r\n    border-radius: 4px;\r\n    text-align: left;\r\n    .projectImage {\r\n      width: 100%;\r\n      max-width: 400px;\r\n      height: 175px;\r\n      object-fit: cover;\r\n      max-height: 230px;\r\n      border-radius: 10px;\r\n      margin: 0 auto;\r\n\r\n    }\r\n    a {\r\n        color: black;\r\n        text-decoration: none;\r\n    }\r\n    p {\r\n        font-size: 0.8rem;\r\n        margin: 0.5rem 0rem;\r\n    }\r\n    h2 {\r\n        font-size: 1.5rem;\r\n        margin: 1.2rem 0rem 0.5rem 0rem;\r\n    }\r\n    small {\r\n        color: gray;\r\n    }\r\n    .read-more {\r\n        font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\r\n        font-size: 0.8rem;\r\n        text-decoration: underline;\r\n        color: #524567;\r\n    }\r\n`;\r\n\r\nconst LISTING_QUERY = graphql`\r\nquery ProjectPostListing {\r\nallMarkdownRemark(limit: 5, filter: {frontmatter: {posttype: {eq: \"project\"}}}, sort: {order: ASC, fields: frontmatter___order}) {\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            slug\r\n            subtitle\r\n            category\r\n            primaryTech\r\n            date(fromNow: true)\r\n            featuredImage {\r\n              childImageSharp {\r\n                fluid(maxWidth: 300) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n             }\r\n          }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst Listing = () => (\r\n  <StaticQuery \r\n    query={LISTING_QUERY}\r\n    render={({ allMarkdownRemark }) => {\r\n        return (\r\n            <GridContainer>\r\n              {allMarkdownRemark.edges.map(edge => {\r\n                  const { frontmatter: { slug, title, category, primaryTech, date, subtitle } } = edge.node\r\n                  const image = edge.node.frontmatter.featuredImage.childImageSharp.fluid\r\n                  console.log(image)\r\n                  return (\r\n                      <Post key={slug}>\r\n                          <Link to={`/projects${slug}`}>\r\n                            <Img className=\"projectImage\" fluid={image} />\r\n                            <h2>{title}</h2>\r\n                            <p>{subtitle}</p>\r\n                            <Button>{category}</Button>\r\n                            <small>{date} | {primaryTech}</small>\r\n                          </Link>\r\n                      </Post>\r\n                  )\r\n              })}\r\n            </GridContainer>\r\n        )\r\n    }}\r\n\r\n  />\r\n\r\n)\r\n\r\nexport default Listing\r\n","import React from 'react'\r\nimport { graphql, Link } from 'gatsby'\r\nimport { GridContainer, Post, Button } from '../../projectListing'\r\nimport Img from \"gatsby-image\"\r\nimport Layout from '../../layout'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n    const { tag } = pageContext\r\n    const { edges, totalCount } = data.allMarkdownRemark\r\n    const tagHeader = `${totalCount} post${\r\n      totalCount === 1 ? \"\" : \"s\"\r\n    } tagged with \"${tag}\"`\r\n    return (\r\n      <Layout>\r\n        <div>\r\n            <h1>{tagHeader}</h1>\r\n            <GridContainer>\r\n            {edges.map(edge => {\r\n                const { frontmatter: { slug, title, category, primaryTech, date, subtitle } } = edge.node\r\n                const image = edge.node.frontmatter.featuredImage.childImageSharp.fluid\r\n                console.log(image)\r\n                return (\r\n                    <Post key={slug}>\r\n                        <Link to={`/projects${slug}`}>\r\n                        <Img className=\"projectImage\" fluid={image} />\r\n                        <h2>{title}</h2>\r\n                        <p>{subtitle}</p>\r\n                        <Button>{category}</Button>\r\n                        <small>{date} | {primaryTech}</small>\r\n                        </Link>\r\n                    </Post>\r\n                )\r\n            })}\r\n            </GridContainer>\r\n            <Link to=\"/tags\">All tags</Link>\r\n        </div>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  export default Tags\r\n\r\n  Tags.propTypes = {\r\n    pageContext: PropTypes.object\r\n  }\r\n\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            date(fromNow: true)\r\n            slug\r\n            tags\r\n            posttype\r\n            subtitle\r\n            category\r\n            primaryTech\r\n            github\r\n            website\r\n            featuredImage {\r\n                childImageSharp {\r\n                  fluid(maxWidth: 800) {\r\n                    ...GatsbyImageSharpFluid\r\n                  }\r\n               }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\n// tagsLayout.propTypes = {\r\n//     pageContext: PropTypes.object,\r\n// }"],"sourceRoot":""}