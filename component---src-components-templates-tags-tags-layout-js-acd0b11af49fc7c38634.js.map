{"version":3,"sources":["webpack:///./src/components/layout2.js","webpack:///./src/components/templates/tags/tagsLayout.js"],"names":["MainWrapper","styled","main","variables","large","StyledFooter","footer","primaryLightGray","Gradient","div","primaryBlue","primaryGreen","Layout","children","location","useState","width","setWidth","useEffect","updateWindowDimensions","window","innerWidth","addEventListener","removeEventListener","from","height","pathname","to","styles","style","overflow","Date","getFullYear","defaultProps","Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","Card","map","edge","node","frontmatter","slug","title","category","primaryTech","date","subtitle","posttype","image","featuredImage","childImageSharp","fluid","key","project","className","StyledButton","pageQuery","primaryWhite","headingFont","medium"],"mappings":"uMAUMA,G,UAAcC,IAAOC,KAAV,2EAAGD,CAAH,wLAQsBE,IAAUC,QAM3CC,EAAeJ,IAAOK,OAAV,4EAAGL,CAAH,gCACPE,IAAUI,kBAIfC,EAAWP,IAAOQ,IAAV,wEAAGR,CAAH,sEAGyBE,IAAUO,YAAgBP,IAAUQ,cAGrEC,EAAS,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACbC,qBAApBC,EADiC,KAC1BC,EAD0B,KAYzC,OAVAC,qBAAU,WACR,IAAMC,EAAyB,WAC7BF,EAASG,OAAOC,aAKlB,OAHAJ,EAASG,OAAOC,YAChBD,OAAOE,iBAAiB,SAAUH,GAE3B,WACLC,OAAOG,oBAAoB,SAAUJ,OAGvC,kBAAC,IAAD,KACGH,EAAQ,IAAM,kBAAC,IAAD,MAAa,kBAAC,IAAD,MACxB,kBAAC,SAAD,CACEQ,KAAM,CAAEC,OAA8B,MAAtBX,EAASY,SAAmB,IAAM,KAClDC,GAAI,CAAEF,OAA8B,MAAtBX,EAASY,SAAmB,IAAM,OAC/C,SAAAE,GAAM,OACL,yBAAKC,MAAK,eAAGC,SAAU,UAAaF,IAClC,kBAACpB,EAAD,UAIR,kBAACR,EAAD,KACKa,GAEL,kBAACR,EAAD,WACK,IAAI0B,MAAOC,cADhB,mBAWRpB,EAAOqB,aAAe,CACpBnB,SAAU,IAGGF,O,kCC7Ef,2JA4CiBsB,UAlCJ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACjBC,EAAQF,EAARE,IAD4B,EAEND,EAAKE,kBAA3BC,EAF4B,EAE5BA,MAAOC,EAFqB,EAErBA,WACTC,EAAeD,EAAN,YACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAGf,OACE,kBAAC,IAAD,KACE,kBAACK,EAAD,KACI,4BAAKD,GACL,kBAAC,IAAD,KACCF,EAAMI,KAAI,SAAAC,GAAS,IAAD,EAC2EA,EAAKC,KAAvFC,YAAeC,EADR,EACQA,KAAMC,EADd,EACcA,MAAOC,EADrB,EACqBA,SAAUC,EAD/B,EAC+BA,YAAaC,EAD5C,EAC4CA,KAAMC,EADlD,EACkDA,SAAUC,EAD5D,EAC4DA,SACrEC,EAAQV,EAAKC,KAAKC,YAAYS,cAAcC,gBAAgBC,MAClE,OACI,kBAAC,IAAD,CAAMC,IAAKX,EAAMY,QAAsB,YAAbN,GACtB,uBAAGO,UAAU,YAAYP,GACzB,kBAAC,OAAD,CAAM1B,GAAiB,YAAb0B,EAAA,YAAqCN,EAArC,aAA2DA,GACrE,kBAAC,IAAD,CAAKa,UAAU,eAAeH,MAAOH,IACrC,4BAAKN,GACL,2BAAII,GACJ,kBAAC,IAAD,KAASH,GACT,+BAAQE,EAAR,MAAiBD,SAM7B,kBAACW,EAAD,KAAc,kBAAC,OAAD,CAAMlC,GAAG,SAAT,qBAanB,IAAMmC,EAAS,aAkChBpB,EAAOzC,IAAOQ,IAAV,uEAAGR,CAAH,MAGJ4D,EAAe5D,IAAOQ,IAAV,+EAAGR,CAAH,ocAKME,IAAUO,YAOVP,IAAUO,YAInBP,IAAU4D,aACJ5D,IAAU6D,YAKL7D,IAAUO,YAIrBP,IAAUO,YAGgBP,IAAU8D","file":"component---src-components-templates-tags-tags-layout-js-acd0b11af49fc7c38634.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Spring } from 'react-spring/renderprops'\nimport HeaderDrawer from './HeaderDrawer'\nimport styled from 'styled-components'\nimport Header from \"./header\"\nimport App from './app'\nimport { variables } from '../styles/variables'\nimport \"./layout.css\"\n\nconst MainWrapper = styled.main`\n  width: 100%;\n  margin: 0rem auto;\n  margin-bottom: 3rem;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 1rem;\n  padding: 0rem;\n  @media only screen and (max-width: ${variables.large}) {\n        grid-template-columns: 1fr;\n    }\n\n`;\n\nconst StyledFooter = styled.footer`\n  color: ${variables.primaryLightGray};\n  font-size: 0.9rem;\n`;\n\nconst Gradient = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, ${variables.primaryBlue}, ${variables.primaryGreen});\n`;\n\nconst Layout = ({ children, location }) => {\n  const [ width, setWidth ] = useState();\n  useEffect(() => {\n    const updateWindowDimensions = () => {\n      setWidth(window.innerWidth);\n    }\n    setWidth(window.innerWidth);\n    window.addEventListener(\"resize\", updateWindowDimensions);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      window.removeEventListener(\"resize\", updateWindowDimensions);    };\n  });\n  return (\n    <App>\n      {width > 928 ? <Header /> : <HeaderDrawer />}\n          <Spring \n            from={{ height: location.pathname === '/' ? 100 : 150 }} \n            to={{ height: location.pathname === '/' ? 150 : 100 }}>\n            {styles => (\n              <div style={{overflow: 'hidden', ...styles}}>\n                <Gradient/>\n              </div>\n            )}\n          </Spring>\n        <MainWrapper>\n            {children}\n        </MainWrapper>\n        <StyledFooter>\n          Â© {new Date().getFullYear()} Andrew Weiss\n        </StyledFooter>\n    </App>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nLayout.defaultProps = {\n  location: {},\n}\n\nexport default Layout\n","import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport { variables } from '../../../styles/variables'\nimport { GridContainer, Post, Button } from '../../projectListing'\nimport styled from 'styled-components'\nimport Img from \"gatsby-image\"\nimport Layout2 from '../../layout2'\nimport PropTypes from 'prop-types'\nimport { ButtonBase } from '@material-ui/core'\n\nconst Tags = ({ pageContext, data }) => {\n    const { tag } = pageContext\n    const { edges, totalCount } = data.allMarkdownRemark\n    const tagHeader = `${totalCount} project${\n      totalCount === 1 ? \"\" : \"s\"\n    } tagged with \"${tag}\"`\n    return (\n      <Layout2>\n        <Card>\n            <h1>{tagHeader}</h1>\n            <GridContainer>\n            {edges.map(edge => {\n                const { frontmatter: { slug, title, category, primaryTech, date, subtitle, posttype } } = edge.node\n                const image = edge.node.frontmatter.featuredImage.childImageSharp.fluid\n                return (\n                    <Post key={slug} project={posttype === \"project\" ? true : false}>\n                        <p className=\"posttype\">{posttype}</p>\n                        <Link to={posttype === \"project\" ? `/projects${slug}` : `/hackathon${slug}`}>\n                        <Img className=\"projectImage\" fluid={image} />\n                        <h2>{title}</h2>\n                        <p>{subtitle}</p>\n                        <Button>{category}</Button>\n                        <small>{date} | {primaryTech}</small>\n                        </Link>\n                    </Post>\n                )\n            })}\n            </GridContainer>\n            <StyledButton><Link to=\"/tags\">View All tags</Link></StyledButton>\n        </Card>\n      </Layout2>\n    )\n  }\n\n  export default Tags\n\n  Tags.propTypes = {\n    pageContext: PropTypes.object\n  }\n\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n            date(fromNow: true)\n            slug\n            tags\n            posttype\n            subtitle\n            category\n            primaryTech\n            github\n            website\n            featuredImage {\n                childImageSharp {\n                  fluid(quality: 100, maxWidth: 1000) {\n                    ...GatsbyImageSharpFluid\n                  }\n               }\n            }\n          }\n        }\n      }\n    }\n  }\n`\nconst Card = styled.div`\n \n`;\nconst StyledButton = styled.div`\n    padding: 0.2rem 0.5rem;\n    text-align: center;\n    border-radius: 5px;\n    z-index: 99;\n    border: solid 2px ${variables.primaryBlue};\n    transition: 300ms ease-in;\n    cursor: pointer;\n    width: 100%;\n    text-align: center;\n    max-width: 250px;\n    margin: 0 auto;\n    background-color: ${variables.primaryBlue};\n   \n    a {\n      text-decoration: none;\n      color: ${variables.primaryWhite};\n      font-family: ${variables.headingFont};\n      font-weight: 300;\n      cursor: pointer;\n    }\n    &:hover {\n      border: solid 2px ${variables.primaryBlue};\n      background: rgba(253, 253, 254, 0.7);\n      a {\n      text-decoration: none;\n      color: ${variables.primaryBlue};\n    }\n    }\n    @media only screen and (max-width: ${variables.medium}) {\n        margin-bottom: 2rem;\n    }\n   \n`;\n"],"sourceRoot":""}