{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/components/hackathonListing.js","webpack:///./src/pages/hackathon.js"],"names":["MainWrapper","styled","main","variables","large","StyledFooter","footer","primaryLightGray","Gradient","div","primaryBlue","primaryGreen","Layout","children","grid","location","useState","width","setWidth","useEffect","updateWindowDimensions","window","innerWidth","addEventListener","removeEventListener","from","height","pathname","to","styles","style","overflow","Date","getFullYear","defaultProps","GridContainer","medium","Button","button","Post","article","Listing","query","render","allMarkdownRemark","edges","map","edge","node","frontmatter","slug","title","category","primaryTech","date","subtitle","image","featuredImage","childImageSharp","fluid","key","className","Paragraph","Hackathons","p"],"mappings":"uMAUMA,G,UAAcC,IAAOC,KAAV,sEAAGD,CAAH,oMAQsBE,IAAUC,QAM3CC,EAAeJ,IAAOK,OAAV,uEAAGL,CAAH,gCACPE,IAAUI,kBAIfC,EAAWP,IAAOQ,IAAV,mEAAGR,CAAH,sEAGyBE,IAAUO,YAAgBP,IAAUQ,cAGrEC,EAAS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,EACnBC,qBAApBC,EADuC,KAChCC,EADgC,KAY/C,OAVAC,qBAAU,WACR,IAAMC,EAAyB,WAC7BF,EAASG,OAAOC,aAKlB,OAHAJ,EAASG,OAAOC,YAChBD,OAAOE,iBAAiB,SAAUH,GAE3B,WACLC,OAAOG,oBAAoB,SAAUJ,OAGvC,kBAAC,IAAD,KACGH,EAAQ,IAAM,kBAAC,IAAD,MAAa,kBAAC,IAAD,MACxB,kBAAC,SAAD,CACEQ,KAAM,CAAEC,OAA8B,MAAtBX,EAASY,SAAmB,IAAM,KAClDC,GAAI,CAAEF,OAA8B,MAAtBX,EAASY,SAAmB,IAAM,OAC/C,SAAAE,GAAM,OACL,yBAAKC,MAAK,eAAGC,SAAU,UAAaF,IAClC,kBAACrB,EAAD,UAILM,EAAO,6BACLD,GAEL,kBAACb,EAAD,KACKa,GAGL,kBAACR,EAAD,WACK,IAAI2B,MAAOC,cADhB,mBAWRrB,EAAOsB,aAAe,CACpBnB,SAAU,IAGGH,O,qJC3EFuB,EAAgBlC,IAAOQ,IAAV,sFAAGR,CAAH,sLAMaE,IAAUiC,QAOpCC,EAASpC,IAAOqC,OAAV,+EAAGrC,CAAH,+OAMKE,IAAUI,iBACrBJ,IAAUI,iBAONJ,IAAUI,kBAIdgC,EAAOtC,IAAOuC,QAAV,6EAAGvC,CAAH,kuBAuGFwC,EA7BC,kBACd,kBAAC,cAAD,CACEC,MA5BiB,aA6BjBC,OAAQ,YAA4B,IAAzBC,EAAwB,EAAxBA,kBACP,OACI,kBAACT,EAAD,KACGS,EAAkBC,MAAMC,KAAI,SAAAC,GAAS,IAAD,EAC+CA,EAAKC,KAA7EC,YAAeC,EADU,EACVA,KAAMC,EADI,EACJA,MAAOC,EADH,EACGA,SAAUC,EADb,EACaA,YAAaC,EAD1B,EAC0BA,KAAMC,EADhC,EACgCA,SAC3DC,EAAQT,EAAKC,KAAKC,YAAYQ,cAAcC,gBAAgBC,MAClE,OACI,kBAACpB,EAAD,CAAMqB,IAAKV,GACP,kBAAC,OAAD,CAAMtB,GAAE,aAAesB,GACrB,kBAAC,IAAD,CAAKW,UAAU,eAAeF,MAAOH,IACrC,4BAAKL,GACL,2BAAII,GACJ,kBAAClB,EAAD,KAASe,GACT,+BAAQE,EAAR,MAAiBD,UAf3C,UC/FIS,GAFSC,UATI,WACjB,OACE,kBAAC,IAAD,CAAQjD,MAAM,GACV,0CACA,kBAACgD,EAAD,8RACA,kBAAC,EAAD,QAMU7D,IAAO+D,EAAV,uEAAG/D,CAAH,4FACFE,IAAUI,oB","file":"component---src-pages-hackathon-js-9b01a0960f76822d98dd.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Spring } from 'react-spring/renderprops'\nimport styled from 'styled-components'\nimport Header from \"./header\"\nimport App from './app'\nimport HeaderDrawer from './HeaderDrawer'\nimport { variables } from '../styles/variables'\nimport \"./layout.css\"\n\nconst MainWrapper = styled.main`\n  max-width: 90%;\n  margin: 0rem auto;\n  margin-bottom: 3rem;\n  display: grid;\n  grid-template-columns: 3fr 1fr;\n  grid-gap: 1rem;\n  padding: 1rem 0rem;\n  @media only screen and (max-width: ${variables.large}) {\n        grid-template-columns: 1fr;\n    }\n\n`;\n\nconst StyledFooter = styled.footer`\n  color: ${variables.primaryLightGray};\n  font-size: 0.9rem;\n`;\n\nconst Gradient = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, ${variables.primaryBlue}, ${variables.primaryGreen});\n`;\n\nconst Layout = ({ children, grid, location }) => {\n  const [ width, setWidth ] = useState();\n  useEffect(() => {\n    const updateWindowDimensions = () => {\n      setWidth(window.innerWidth);\n    }\n    setWidth(window.innerWidth);\n    window.addEventListener(\"resize\", updateWindowDimensions);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      window.removeEventListener(\"resize\", updateWindowDimensions);    };\n  });\n  return (\n    <App>\n      {width > 928 ? <Header /> : <HeaderDrawer />}\n          <Spring \n            from={{ height: location.pathname === '/' ? 100 : 150 }} \n            to={{ height: location.pathname === '/' ? 150 : 100 }}>\n            {styles => (\n              <div style={{overflow: 'hidden', ...styles}}>\n                <Gradient/>\n              </div>\n            )}\n          </Spring>\n          {grid ? <div>\n            {children}\n          </div> : \n        <MainWrapper>\n            {children}\n        </MainWrapper>\n          }\n        <StyledFooter>\n          Â© {new Date().getFullYear()} Andrew Weiss\n        </StyledFooter>\n    </App>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nLayout.defaultProps = {\n  location: {},\n}\n\nexport default Layout\n","import React from \"react\"\nimport { StaticQuery, Link, graphql } from \"gatsby\"\nimport { variables } from '../styles/variables'\nimport Img from 'gatsby-image'\nimport styled from 'styled-components'\n\nexport const GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 300px);\n  grid-gap: 1rem;\n  justify-content: center;\n  margin-bottom: 2.5rem;\n  @media only screen and (max-width: ${variables.medium}) {\n        h2 {\n          font-size: 1.2rem;\n        }\n    }\n`;\n\nexport const Button = styled.button`\n    padding: 0rem 0.5rem;\n    text-align: center;\n    border-radius: 2px;\n    display: block;\n    font-size: 0.7rem;\n    border: solid 1px ${variables.primaryLightGray};\n    color: ${variables.primaryLightGray};\n    transition: 300ms ease-in;\n    cursor: pointer;\n    width: auto-fit;\n    background: transparent;\n    margin: 0.5rem 0rem;\n    &:hover {\n        color: ${variables.primaryLightGray};\n    }\n`;\n\nexport const Post = styled.article`\n    box-shadow: 0px 3px 10px rgba(25, 17, 34, 0.09);\n    padding: 1rem;\n    border-radius: 10px;\n    text-align: left;\n    transition: 200ms linear;\n    overflow: hidden;\n    cursor: pointer;\n\n    &:hover {\n      box-shadow: 0px 3px 20px rgba(25, 17, 34, 0.1);\n      & .projectImage {\n        transform: scale(1.01);\n      }\n    }\n    .projectImage {\n      width: 100%;\n      max-width: 400px;\n      height: 175px;\n      object-fit: cover;\n      max-height: 230px;\n      border-radius: 10px;\n      margin: 0 auto;\n      transition: 200ms ease-out;\n    }\n    a {\n        color: black;\n        text-decoration: none;\n    }\n    p {\n        font-size: 0.8rem;\n        margin: 0.5rem 0rem;\n    }\n    h2 {\n        font-size: 1.5rem;\n        margin: 1.2rem 0rem 0.5rem 0rem;\n    }\n    small {\n        color: gray;\n    }\n    .read-more {\n        font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif;\n        font-size: 0.8rem;\n        text-decoration: underline;\n        color: #524567;\n    }\n`;\n\nconst Hackathon_Query = graphql`\nquery hackathonListing {\nallMarkdownRemark(limit: 100, filter: {frontmatter: {posttype: {eq: \"hackathon\"}}}, sort: {order: DESC, fields: frontmatter___order}) {\n      edges {\n        node {\n          frontmatter {\n            title\n            slug\n            subtitle\n            category\n            primaryTech\n            date(fromNow: true)\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 300) {\n                  ...GatsbyImageSharpFluid\n                }\n             }\n          }\n          }\n        }\n      }\n    }\n  }\n`\n\nconst Listing = () => (\n  <StaticQuery \n    query={Hackathon_Query}\n    render={({ allMarkdownRemark }) => {\n        return (\n            <GridContainer>\n              {allMarkdownRemark.edges.map(edge => {\n                  const { frontmatter: { slug, title, category, primaryTech, date, subtitle } } = edge.node\n                  const image = edge.node.frontmatter.featuredImage.childImageSharp.fluid\n                  return (\n                      <Post key={slug}>\n                          <Link to={`/hackathon${slug}`}>\n                            <Img className=\"projectImage\" fluid={image} />\n                            <h2>{title}</h2>\n                            <p>{subtitle}</p>\n                            <Button>{category}</Button>\n                            <small>{date} | {primaryTech}</small>\n                          </Link>\n                      </Post>\n                  )\n              })}\n            </GridContainer>\n        )\n    }}\n\n  />\n\n)\n\nexport default Listing\n","import React from \"react\"\nimport Layout from \"../components/layout\"\nimport HackathonListing from '../components/hackathonListing'\nimport { variables } from '../styles/variables'\nimport styled from 'styled-components'\n\nconst Hackathons = () => {\n  return(\n    <Layout grid={true}>\n        <h1>Hackathons</h1>\n        <Paragraph>I love leveling up my skills and exposing myself to new technologies. Joining in the MintBean hackathons has been a great way to do this as well as meet and learn from other developers new to the field like myself. Checkout some of the projects I have built in past challenges.</Paragraph>\n        <HackathonListing />\n    </Layout>\n  )}\n\nexport default Hackathons\n\nconst Paragraph = styled.p`\n    color: ${variables.primaryLightGray};\n    padding: 1rem 2rem 3rem 2rem;\n    max-width: 900px;\n    margin: 0 auto;\n    text-align: justify;\n`;"],"sourceRoot":""}