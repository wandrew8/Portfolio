{"version":3,"sources":["webpack:///./src/components/layout2.js","webpack:///./src/components/templates/tags/tagsLayout.js"],"names":["MainWrapper","styled","main","variables","large","StyledFooter","footer","primaryLightGray","Gradient","div","primaryBlue","primaryGreen","Layout","children","location","useState","width","setWidth","useEffect","updateWindowDimensions","window","innerWidth","addEventListener","removeEventListener","from","height","pathname","to","styles","style","overflow","Date","getFullYear","defaultProps","Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","edge","node","frontmatter","slug","title","category","primaryTech","date","subtitle","image","featuredImage","childImageSharp","fluid","console","log","key","className","StyledButton","pageQuery","primaryWhite","headingFont","medium"],"mappings":"uMAUMA,G,UAAcC,IAAOC,KAAV,2EAAGD,CAAH,wLAQsBE,IAAUC,QAM3CC,EAAeJ,IAAOK,OAAV,4EAAGL,CAAH,gCACPE,IAAUI,kBAIfC,EAAWP,IAAOQ,IAAV,wEAAGR,CAAH,sEAGyBE,IAAUO,YAAgBP,IAAUQ,cAGrEC,EAAS,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACbC,qBAApBC,EADiC,KAC1BC,EAD0B,KAYzC,OAVAC,qBAAU,WACR,IAAMC,EAAyB,WAC7BF,EAASG,OAAOC,aAKlB,OAHAJ,EAASG,OAAOC,YAChBD,OAAOE,iBAAiB,SAAUH,GAE3B,WACLC,OAAOG,oBAAoB,SAAUJ,OAGvC,kBAAC,IAAD,KACGH,EAAQ,IAAM,kBAAC,IAAD,MAAa,kBAAC,IAAD,MACxB,kBAAC,SAAD,CACEQ,KAAM,CAAEC,OAA8B,MAAtBX,EAASY,SAAmB,IAAM,KAClDC,GAAI,CAAEF,OAA8B,MAAtBX,EAASY,SAAmB,IAAM,OAC/C,SAAAE,GAAM,OACL,yBAAKC,MAAK,eAAGC,SAAU,UAAaF,IAClC,kBAACpB,EAAD,UAIR,kBAACR,EAAD,KACKa,GAEL,kBAACR,EAAD,WACK,IAAI0B,MAAOC,cADhB,mBAWRpB,EAAOqB,aAAe,CACpBnB,SAAU,IAGGF,O,kCC7Ef,2JA4CiBsB,UAlCJ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACjBC,EAAQF,EAARE,IAD4B,EAEND,EAAKE,kBAA3BC,EAF4B,EAE5BA,MAAOC,EAFqB,EAErBA,WACTC,EAAeD,EAAN,YACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAGf,OACE,kBAAC,IAAD,KACE,6BACI,4BAAKI,GACL,kBAAC,IAAD,KACCF,EAAMG,KAAI,SAAAC,GAAS,IAAD,EACiEA,EAAKC,KAA7EC,YAAeC,EADR,EACQA,KAAMC,EADd,EACcA,MAAOC,EADrB,EACqBA,SAAUC,EAD/B,EAC+BA,YAAaC,EAD5C,EAC4CA,KAAMC,EADlD,EACkDA,SAC3DC,EAAQT,EAAKC,KAAKC,YAAYQ,cAAcC,gBAAgBC,MAElE,OADAC,QAAQC,IAAIL,GAER,kBAAC,IAAD,CAAMM,IAAKZ,GACP,kBAAC,OAAD,CAAMnB,GAAE,YAAcmB,GACtB,kBAAC,IAAD,CAAKa,UAAU,eAAeJ,MAAOH,IACrC,4BAAKL,GACL,2BAAII,GACJ,kBAAC,IAAD,KAASH,GACT,+BAAQE,EAAR,MAAiBD,SAM7B,kBAACW,EAAD,KAAc,kBAAC,OAAD,CAAMjC,GAAG,SAAT,qBAanB,IAAMkC,EAAS,aAmChBD,EAAe3D,IAAOQ,IAAV,+EAAGR,CAAH,qcAKME,IAAUO,YAOVP,IAAUO,YAGnBP,IAAU2D,aACJ3D,IAAU4D,YAKL5D,IAAUO,YAIrBP,IAAUO,YAGgBP,IAAU6D","file":"component---src-components-templates-tags-tags-layout-js-2897de98705ab6435ca0.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Spring } from 'react-spring/renderprops'\r\nimport HeaderDrawer from './HeaderDrawer'\r\nimport styled from 'styled-components'\r\nimport Header from \"./header\"\r\nimport App from './app'\r\nimport { variables } from '../styles/variables'\r\nimport \"./layout.css\"\r\n\r\nconst MainWrapper = styled.main`\r\n  width: 100%;\r\n  margin: 0rem auto;\r\n  margin-bottom: 3rem;\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-gap: 1rem;\r\n  padding: 0rem;\r\n  @media only screen and (max-width: ${variables.large}) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n\r\n`;\r\n\r\nconst StyledFooter = styled.footer`\r\n  color: ${variables.primaryLightGray};\r\n  font-size: 0.9rem;\r\n`;\r\n\r\nconst Gradient = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  background: linear-gradient(90deg, ${variables.primaryBlue}, ${variables.primaryGreen});\r\n`;\r\n\r\nconst Layout = ({ children, location }) => {\r\n  const [ width, setWidth ] = useState();\r\n  useEffect(() => {\r\n    const updateWindowDimensions = () => {\r\n      setWidth(window.innerWidth);\r\n    }\r\n    setWidth(window.innerWidth);\r\n    window.addEventListener(\"resize\", updateWindowDimensions);\r\n    // Specify how to clean up after this effect:\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", updateWindowDimensions);    };\r\n  });\r\n  return (\r\n    <App>\r\n      {width > 756 ? <Header /> : <HeaderDrawer />}\r\n          <Spring \r\n            from={{ height: location.pathname === '/' ? 100 : 150 }} \r\n            to={{ height: location.pathname === '/' ? 150 : 100 }}>\r\n            {styles => (\r\n              <div style={{overflow: 'hidden', ...styles}}>\r\n                <Gradient/>\r\n              </div>\r\n            )}\r\n          </Spring>\r\n        <MainWrapper>\r\n            {children}\r\n        </MainWrapper>\r\n        <StyledFooter>\r\n          Â© {new Date().getFullYear()} Andrew Weiss\r\n        </StyledFooter>\r\n    </App>\r\n  )\r\n}\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nLayout.defaultProps = {\r\n  location: {},\r\n}\r\n\r\nexport default Layout\r\n","import React from 'react'\r\nimport { graphql, Link } from 'gatsby'\r\nimport { variables } from '../../../styles/variables'\r\nimport { GridContainer, Post, Button } from '../../projectListing'\r\nimport styled from 'styled-components'\r\nimport Img from \"gatsby-image\"\r\nimport Layout2 from '../../layout2'\r\nimport PropTypes from 'prop-types'\r\nimport { ButtonBase } from '@material-ui/core'\r\n\r\nconst Tags = ({ pageContext, data }) => {\r\n    const { tag } = pageContext\r\n    const { edges, totalCount } = data.allMarkdownRemark\r\n    const tagHeader = `${totalCount} project${\r\n      totalCount === 1 ? \"\" : \"s\"\r\n    } tagged with \"${tag}\"`\r\n    return (\r\n      <Layout2>\r\n        <div>\r\n            <h1>{tagHeader}</h1>\r\n            <GridContainer>\r\n            {edges.map(edge => {\r\n                const { frontmatter: { slug, title, category, primaryTech, date, subtitle } } = edge.node\r\n                const image = edge.node.frontmatter.featuredImage.childImageSharp.fluid\r\n                console.log(image)\r\n                return (\r\n                    <Post key={slug}>\r\n                        <Link to={`/projects${slug}`}>\r\n                        <Img className=\"projectImage\" fluid={image} />\r\n                        <h2>{title}</h2>\r\n                        <p>{subtitle}</p>\r\n                        <Button>{category}</Button>\r\n                        <small>{date} | {primaryTech}</small>\r\n                        </Link>\r\n                    </Post>\r\n                )\r\n            })}\r\n            </GridContainer>\r\n            <StyledButton><Link to=\"/tags\">View All tags</Link></StyledButton>\r\n        </div>\r\n      </Layout2>\r\n    )\r\n  }\r\n\r\n  export default Tags\r\n\r\n  Tags.propTypes = {\r\n    pageContext: PropTypes.object\r\n  }\r\n\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String) {\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            date(fromNow: true)\r\n            slug\r\n            tags\r\n            posttype\r\n            subtitle\r\n            category\r\n            primaryTech\r\n            github\r\n            website\r\n            featuredImage {\r\n                childImageSharp {\r\n                  fluid(quality: 100, maxWidth: 1000) {\r\n                    ...GatsbyImageSharpFluid\r\n                  }\r\n               }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledButton = styled.div`\r\n    padding: 0.2rem 0.5rem;\r\n    text-align: center;\r\n    border-radius: 5px;\r\n    z-index: 100;\r\n    border: solid 2px ${variables.primaryBlue};\r\n    transition: 300ms ease-in;\r\n    cursor: pointer;\r\n    width: 100%;\r\n    text-align: center;\r\n    max-width: 250px;\r\n    margin: 0 auto;\r\n    background-color: ${variables.primaryBlue};\r\n    a {\r\n      text-decoration: none;\r\n      color: ${variables.primaryWhite};\r\n      font-family: ${variables.headingFont};\r\n      font-weight: 300;\r\n      cursor: pointer;\r\n    }\r\n    &:hover {\r\n      border: solid 2px ${variables.primaryBlue};\r\n      background: rgba(253, 253, 254, 0.7);\r\n      a {\r\n      text-decoration: none;\r\n      color: ${variables.primaryBlue};\r\n    }\r\n    }\r\n    @media only screen and (max-width: ${variables.medium}) {\r\n        margin-bottom: 2rem;\r\n    }\r\n   \r\n`;\r\n"],"sourceRoot":""}