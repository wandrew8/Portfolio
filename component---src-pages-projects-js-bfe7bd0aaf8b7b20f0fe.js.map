{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/components/layout.js","webpack:///./src/components/projectArchive.js"],"names":["Projects","props","location","MainWrapper","styled","main","variables","large","StyledFooter","footer","primaryLightGray","Gradient","div","primaryBlue","primaryGreen","Layout","children","grid","useState","width","setWidth","useEffect","updateWindowDimensions","window","innerWidth","addEventListener","removeEventListener","from","height","pathname","to","styles","style","overflow","Date","getFullYear","defaultProps","StyledAside","aside","ArchiveList","ul","headingFont","primaryFont","Archive","edges","allMarkdownRemark","map","edge","node","excerpt","frontmatter","title","slug","featuredImage","subtitle","key","className","fluid","childImageSharp"],"mappings":"kvWAAA,oEAaeA,UARE,SAACC,GAChB,OACE,kBAAC,IAAD,CAAQC,SAAUD,EAAMC,UACtB,kBAAC,IAAD,MACA,kBAAC,IAAD,S,6ICCAC,G,UAAcC,IAAOC,KAAV,sEAAGD,CAAH,oMAQsBE,IAAUC,QAM3CC,EAAeJ,IAAOK,OAAV,uEAAGL,CAAH,gCACPE,IAAUI,kBAIfC,EAAWP,IAAOQ,IAAV,mEAAGR,CAAH,sEAGyBE,IAAUO,YAAgBP,IAAUQ,cAGrEC,EAAS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,KAAMf,EAAe,EAAfA,SAAe,EACnBgB,qBAApBC,EADuC,KAChCC,EADgC,KAY/C,OAVAC,qBAAU,WACR,IAAMC,EAAyB,WAC7BF,EAASG,OAAOC,aAKlB,OAHAJ,EAASG,OAAOC,YAChBD,OAAOE,iBAAiB,SAAUH,GAE3B,WACLC,OAAOG,oBAAoB,SAAUJ,OAGvC,kBAAC,IAAD,KACGH,EAAQ,IAAM,kBAAC,IAAD,MAAa,kBAAC,IAAD,MACxB,kBAAC,SAAD,CACEQ,KAAM,CAAEC,OAA8B,MAAtB1B,EAAS2B,SAAmB,IAAM,KAClDC,GAAI,CAAEF,OAA8B,MAAtB1B,EAAS2B,SAAmB,IAAM,OAC/C,SAAAE,GAAM,OACL,yBAAKC,MAAK,eAAGC,SAAU,UAAaF,IAClC,kBAACpB,EAAD,UAILM,EAAO,6BACLD,GAEL,kBAACb,EAAD,KACKa,GAGL,kBAACR,EAAD,WACK,IAAI0B,MAAOC,cADhB,mBAWRpB,EAAOqB,aAAe,CACpBlC,SAAU,IAGGa,O,gIC1ETsB,EAAcjC,IAAOkC,MAAV,kFAAGlC,CAAH,+JAKsBE,IAAUC,OAO3CgC,EAAcnC,IAAOoC,GAAV,kFAAGpC,CAAH,weAYIE,IAAUmC,YAMRnC,IAAUoC,aA8ElBC,IA9BC,WACd,IACQC,EADE,OACaC,kBAAfD,MAER,OACE,oCACE,kBAACP,EAAD,KACI,4CACA,kBAACE,EAAD,KACGK,EAAME,KAAI,SAACC,GAAU,IAAD,EACyDA,EAAKC,KAAvEC,EADS,EACTA,QADS,IACAC,YAAeC,EADf,EACeA,MAAOC,EADtB,EACsBA,KAAgBC,GADtC,EAC4BC,SAD5B,EACsCD,eACxD,OACI,kBAAC,OAAD,CAAME,IAAKH,EAAMtB,GAAE,YAAcsB,GAC5B,4BACI,6BACA,yBAAKI,UAAU,aACb,uBAAGA,UAAU,SAASL,GACtB,kBAAC,IAAD,CAAKK,UAAU,QAAQC,MAAOJ,EAAcK,gBAAgBD,SAE9D,2BAAIR","file":"component---src-pages-projects-js-bfe7bd0aaf8b7b20f0fe.js","sourcesContent":["import React from \"react\"\nimport Layout from \"../components/layout\"\nimport ProjectArchive from '../components/projectArchive'\nimport ProjectListing from '../components/projectListing'\n\nconst Projects = (props) => {\n  return(\n    <Layout location={props.location}>\n      <ProjectListing />\n      <ProjectArchive />\n    </Layout>\n  )}\n\nexport default Projects\n","import React, { useEffect, useState } from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Spring } from 'react-spring/renderprops'\nimport styled from 'styled-components'\nimport Header from \"./header\"\nimport App from './app'\nimport HeaderDrawer from './HeaderDrawer'\nimport { variables } from '../styles/variables'\nimport \"./layout.css\"\n\nconst MainWrapper = styled.main`\n  max-width: 90%;\n  margin: 0rem auto;\n  margin-bottom: 3rem;\n  display: grid;\n  grid-template-columns: 3fr 1fr;\n  grid-gap: 1rem;\n  padding: 1rem 0rem;\n  @media only screen and (max-width: ${variables.large}) {\n        grid-template-columns: 1fr;\n    }\n\n`;\n\nconst StyledFooter = styled.footer`\n  color: ${variables.primaryLightGray};\n  font-size: 0.9rem;\n`;\n\nconst Gradient = styled.div`\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(90deg, ${variables.primaryBlue}, ${variables.primaryGreen});\n`;\n\nconst Layout = ({ children, grid, location }) => {\n  const [ width, setWidth ] = useState();\n  useEffect(() => {\n    const updateWindowDimensions = () => {\n      setWidth(window.innerWidth);\n    }\n    setWidth(window.innerWidth);\n    window.addEventListener(\"resize\", updateWindowDimensions);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      window.removeEventListener(\"resize\", updateWindowDimensions);    };\n  });\n  return (\n    <App>\n      {width > 756 ? <Header /> : <HeaderDrawer />}\n          <Spring \n            from={{ height: location.pathname === '/' ? 100 : 150 }} \n            to={{ height: location.pathname === '/' ? 150 : 100 }}>\n            {styles => (\n              <div style={{overflow: 'hidden', ...styles}}>\n                <Gradient/>\n              </div>\n            )}\n          </Spring>\n          {grid ? <div>\n            {children}\n          </div> : \n        <MainWrapper>\n            {children}\n        </MainWrapper>\n          }\n        <StyledFooter>\n          Â© {new Date().getFullYear()} Andrew Weiss\n        </StyledFooter>\n    </App>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nLayout.defaultProps = {\n  location: {},\n}\n\nexport default Layout\n","import React from \"react\"\r\nimport { Link } from 'gatsby'\r\nimport Img from 'gatsby-image'\r\nimport styled from 'styled-components'\r\nimport { variables } from '../styles/variables'\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst StyledAside = styled.aside`\r\n  min-width: 300px;\r\n  max-width: 400px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  @media only screen and (max-width: ${variables.large}) {\r\n        grid-template-columns: 1fr;\r\n        min-width: none;\r\n        max-width: 600px;\r\n    }\r\n`;\r\n\r\nconst ArchiveList = styled.ul`\r\n    list-style: none;\r\n    padding: 0;\r\n    margin: 0;\r\n    text-align: left;\r\n    .container {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n    }\r\n    .title {\r\n      font-weight: 500;\r\n      font-family: ${variables.headingFont};\r\n      font-size: 1.2rem;\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n    a {\r\n        font-family: ${variables.primaryFont};\r\n        font-size: 0.8rem;\r\n        text-decoration: none;\r\n        color: #524567;\r\n        transition: 200ms linear;\r\n        &:hover {\r\n        box-shadow: 0px 3px 20px rgba(25, 17, 34, 0.1);\r\n      }\r\n    }\r\n    .image {\r\n      border-radius: 50%;\r\n      height: 50px;\r\n      min-width: 50px;\r\n      width: 50px;\r\n      object-fit: cover;\r\n      margin: 0rem 2rem 0.2rem 0.2rem;\r\n    }\r\n    hr {\r\n      margin-bottom: 1rem;\r\n    }\r\n   \r\n`;\r\n\r\nconst POST_ARCHIVE_QUERY = graphql`\r\nquery ProjectArchive {\r\n  allMarkdownRemark(limit: 5, filter: {frontmatter: {posttype: {eq: \"project\"}}}, sort: {order: ASC, fields: frontmatter___order}) {\r\n    edges {\r\n      node {\r\n        frontmatter {\r\n          title\r\n          slug\r\n          tags\r\n          subtitle\r\n          featuredImage {\r\n            childImageSharp {\r\n              fluid(maxWidth: 75) {\r\n                ...GatsbyImageSharpFluid\r\n              }\r\n           }\r\n        }\r\n        }\r\n        excerpt(pruneLength: 100)\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\nconst Archive = () => {\r\n  const data = useStaticQuery(POST_ARCHIVE_QUERY)\r\n  const { edges } = data.allMarkdownRemark;\r\n\r\n  return (\r\n    <>\r\n      <StyledAside>\r\n          <h3>Top Projects</h3>\r\n          <ArchiveList>\r\n            {edges.map((edge) => {\r\n                const { excerpt, frontmatter: { title, slug, subtitle, featuredImage }} = edge.node;\r\n               return ( \r\n                   <Link key={slug} to={`/projects${slug}`}>\r\n                        <li>\r\n                            <hr/>\r\n                            <div className=\"container\">\r\n                              <p className=\"title\">{title}</p>\r\n                              <Img className=\"image\" fluid={featuredImage.childImageSharp.fluid} />\r\n                            </div>\r\n                            <p>{excerpt}</p>\r\n                        </li>\r\n                    </Link>\r\n               )\r\n            })}\r\n          </ArchiveList>\r\n      </StyledAside>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Archive\r\n"],"sourceRoot":""}